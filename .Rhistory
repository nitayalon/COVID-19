}
T0=T0*del
TT=diff(T0)-1
COV=t(TT)%*%TT/(n-1)
AD=beta*Ym*max(K-Xm,0)
BD=gamma*Ym
OBJ1=sum(log(AD)+log(BD))
OBJ[hhh]=OBJ1+(n/2)*log(det(COV))
LOGL[hhh]=log(det(COV))
VAR1[hhh,]=sqrt(mean(diag(COV)))
OBJB[hhh]=sum(log(AD))+(n/2)*log(COV[1,1])
}
vv=which.min(OBJB)
beta=betahat[vv]
gamma=gammahat[vv]
K=asympt[vv]
for(i in seq(101,500*n)){
x[i]=x[i-1]+beta*sqrt(y[i-1])*max(0,K-x[i-1])*del
vw[i]=vw[i-1]+gamma*y[i-1]*del
w[i]=w[i-1]+eta*y[i-1]*del
y[i]=max(0,x[i]-vw[i])
}
for(i in 1:n){
T1[i,1]=sum(x<=X(i))
T1[i,2]=sum(vw<=VW(i))
}
for(i in 1:n){
T1[i,1]=sum(x<=X[i])
T1[i,2]=sum(vw<=VW[i])
}
T1=T1*del
TT=diff(T1)-1
COV=t(TT)*TT/(n-1)
COV=t(TT)%*%TT/(n-1)
COV
AD=beta*Ym*max(K-Xm,0)
AD
BD=gamma*Ym
BD
gamma
Ym
vv
gammahat
betahat
TT
COV
state = 'Italy'
confirmed_cases <- global_confirmed_cases %>%
select(-`Province/State`, -Lat, -Long) %>%
group_by(`Country/Region`) %>%
filter(`Country/Region` == state) %>%
summarise_all(list(total = sum))
confirmed_deaths <- global_confirmed_deaths %>%
select(-`Province/State`, -Lat, -Long) %>%
group_by(`Country/Region`) %>%
filter(`Country/Region` == state) %>%
summarise_all(list(total = sum))
confirmed_recovered <- global_confirmed_recovered %>%
select(-`Province/State`, -Lat, -Long) %>%
group_by(`Country/Region`) %>%
filter(`Country/Region` == state) %>%
summarise_all(list(total = sum))
full_data_for_export <- full_join(
full_join(confirmed_cases %>%
gather(var, val, 2:ncol(confirmed_cases)) %>%
select(var, val),
confirmed_deaths %>%
gather(var, val, 2:ncol(confirmed_cases)) %>%
select(var, val),
by = "var",
suffix = c('.confirmed_cases','.confirmed_deaths')),
confirmed_recovered %>%
gather(var, val, 2:ncol(confirmed_cases)) %>%
select(var, val),
by = "var"
)
full_data_for_export
full_data_for_export %>%
mutate(VW = val.confirmed_deaths + val) %>%
select(X = val.confirmed_cases, VW)
real_data <- full_data_for_export %>%
mutate(VW = val.confirmed_deaths + val) %>%
select(X = val.confirmed_cases, VW)
real_data$X[52:nrow(real_data)]
nrow(real_data)
full_data_for_export
real_data <- full_data_for_export %>%
mutate(VW = val.confirmed_deaths + val) %>%
select(X = val.confirmed_cases, V = val.confirmed_deaths, W = val)
beta0=1*10^-5
gamma0=15*10^-4
eta0=20*10^-4
K0=1000
n=1000
res=.005
del=1/100
real_data <- full_data_for_export %>%
mutate(VW = val.confirmed_deaths + val) %>%
select(X = val.confirmed_cases, V = val.confirmed_deaths, W = val)
XD=real_data$X[52:nrow(real_data)]
WD = real_data$V[52:nrow(real_data)]
VD= real_data$W[52:nrow(real_data)]
simu = T
OBJ = OBJB = LOGL = gammahat = betahat = asympt = c()
VAR1 = T0 = T1 = matrix(nrow = n, ncol = 2)
beta=beta0
gamma=gamma0
eta=eta0
x=rep(0,500*n)
y = w = v = wv = x
X1=rep(0,n)
V1=X1
Y1=X1
W1=X1
X3=X1
V3=V1
W3=W1
x[1]=XD[1]
v[1]=VD[1]
w[1]=WD[1]
y[1]=max(0,x[1]-w[1]-v[1])
if(simu){
for(i in 2:length(x)){
x[i]=x[i-1]+beta*y[i-1]*max(0,K0-x[i-1])*del
vw[i]=vw[i-1]+gamma*y[i-1]*del
y[i]=max(0,x[i]-vw[i])
}
}
X1=x[100*(1:n)]
V1=v[100*(1:n)]
W1=w[100*(1:n)]
X2=X1*(1+rnorm(n)*res)
V2=V1*(1+rnorm(n)*res)
W2=W1*(1+rnorm(n)*res)
X3[1]=X2[1]
V3[1]=V2[1]
W3[1]=W2[1]
for (i in 2:n){
X3[i]=max(X3[i-1],X2[i])
V3[i]=max(V3[i-1],V2[i])
W3[i]=max(W3[i-1],W2[i])
}
X=X3
W=W3
V=V3
Y=pmax(0,X-W-V)
VW=V+W
Ym=(Y[1:(length(Y)-1)]+Y[2:length(Y)])/2
Ym=rbind(Ym , Y[length(Y)])
Xm=(X[1:(length(X)-1)]+X[2:length(X)])/2
Xm=rbind(Xm , X[length(X)])
VW=V+W
x[1:100]=X[1]
y[1:100]=Y[1]
w[1:100]=W[1]
v[1:100]=V[1]
vw[1:100]=V[1]+W[1]
NNN=1e4
# Skip this loop
for (hhh in 1:120){
# Set another value for K
K=max(X)+hhh*NNN
asympt[hhh]=K
betahat[hhh]=(X[length(X)]-X[1])/sum(sqrt(Ym-Ym[1])*(K-(Xm-Xm[1])))
beta=betahat[hhh]
gammahat[hhh]=(VW[length(VW)]-VW[1])/sum(Ym-Ym[1])
gamma=gammahat[hhh]
for(jjj in 1:5){
for (i in seq(101,500*n)){
x[i]=x[i-1]+beta*sqrt(y[i-1])*max(0,K-x[i-1])*del
vw[i]=vw[i-1]+gamma*y[i-1]*del
y[i]=max(0,x[i]-vw[i])
}
for(i in 1:n){
T1[i,1]=sum(x<=X[i])
T1[i,2]=sum(vw<=VW[i])
}
T1=T1*del
beta=beta*T1[n,1]/n
gamma=gamma*T1[n,2]/n
betahat[hhh]=beta
gammahat[hhh]=gamma
}
for(i in seq(101,500*n)){
x[i]=x[i-1]+beta*sqrt(y[i-1])*max(0,K-x[i-1])*del
vw[i]=vw[i-1]+gamma*y[i-1]*del
y[i]=max(0,x[i]-vw[i])
}
for(i in 1:n){
T0[i,1]=sum(x<=X[i])
T0[i,2]=sum(vw<=VW[i])
}
T0=T0*del
TT=diff(T0)-1
COV=t(TT)%*%TT/(n-1)
AD=beta*Ym*max(K-Xm,0)
BD=gamma*Ym
OBJ1=sum(log(AD)+log(BD))
OBJ[hhh]=OBJ1+(n/2)*log(det(COV))
LOGL[hhh]=log(det(COV))
VAR1[hhh,]=sqrt(mean(diag(COV)))
OBJB[hhh]=sum(log(AD))+(n/2)*log(COV[1,1])
}
vv=which.min(OBJB)
beta=betahat[vv]
gamma=gammahat[vv]
K=asympt[vv]
for(i in seq(101,500*n)){
x[i]=x[i-1]+beta*sqrt(y[i-1])*max(0,K-x[i-1])*del
vw[i]=vw[i-1]+gamma*y[i-1]*del
w[i]=w[i-1]+eta*y[i-1]*del
y[i]=max(0,x[i]-vw[i])
}
for(i in 1:n){
T1[i,1]=sum(x<=X[i])
T1[i,2]=sum(vw<=VW[i])
}
T1=T1*del
TT=diff(T1)-1
COV=t(TT)%*%TT/(n-1)
AD=beta*Ym*max(K-Xm,0)
BD=gamma*Ym
COV
x
vw
y
plot(XD,'l', col = 'blue')
plot(XD,type = 'l', col = 'blue')
plot(XD,type = 'l', col = 'blue')
lines(x, col = 'red')
plot(XD,type = 'l', col = 'blue')
lines(x*100, col = 'red')
x*100
plot(XD,type = 'l', col = 'blue')
lines(x*10, col = 'red')
x
XD
x
plot(XD,type = 'l', col = 'blue')
lines(x[1:100 * 100], col = 'red')
XD
x[200]
x
plot(x, col = 'red')
plot(XD,type = 'l', col = 'blue')
i:100 *100
(1:100) *100
plot(x[(1:100) *100], col = 'red')
K
nrow(real_data)
#input country data QQQ
real_data <- full_data_for_export %>%
mutate(VW = val.confirmed_deaths + val) %>%
select(X = val.confirmed_cases, V = val.confirmed_deaths, W = val)
real_data
nq=nrow(real_data)
nq=nrow(real_data)
nq
QQ2[1,]=real_data[1,]
QQ2 = matrix(ncol = ncol(real_data), nrow = nrow(real_data))
QQ2[1,]=real_data[1,]
QQ2
ncol(real_data)
nrow(real_data)
matrix(ncol = ncol(real_data), nrow = nrow(real_data))
QQ2 = matrix(ncol = ncol(real_data), nrow = nrow(real_data))
QQ2[1,]
real_data[1,]
QQ2[1,]=real_data[1,]
real_data[1,]
#Making sure data is monotone
QQ2 = matrix(ncol = ncol(real_data), nrow = nrow(real_data))
QQ2[1,]=as.vector(real_data[1,])
#Making sure data is monotone
QQ2 = matrix(ncol = ncol(real_data), nrow = nrow(real_data))
as.vector(real_data[1,])
QQ2 = matrix(ncol = ncol(real_data), nrow = nrow(real_data)) %>% as.tibble()
QQ2 = matrix(ncol = ncol(real_data), nrow = nrow(real_data)) %>% as_tibble()
QQ2[1,]=real_data[1,]
QQ2[1,]
real_data[1,]
real_data[1,]
real_data
QQ2[1,]
2:nq
for(j in 1:3)
for(j in 1:3)
{
for(i in 2:nq)
{
QQ2[i,j]=max(QQ2[i-1,j],QQQ[i,j])
}
}
real_data[i,j]
for(j in 1:3)
{
for(i in 2:nq)
{
QQ2[i,j]=max(QQ2[i-1,j],real_data[i,j])
}
}
max(c(QQ2[i-1,j],real_data[i,j]))
QQ2[i-1,j]
real_data[i,j]
c(QQ2[i-1,j],real_data[i,j])
take_max <- function(qq2, comparable_data)
{
n_row = nrow(comparable_data)
results = rep(0,n_row)
for(i in 1:nrow){
results[i] = max(c(qq2[i-1],comparable_data[i]))
}
return(results)
}
QQ3 <- sapply(1:3, function(x){
take_max(QQ2[,x], real_data[,x])
})
take_max <- function(qq2, comparable_data)
{
browser()
n_row = nrow(comparable_data)
results = rep(0,n_row)
for(i in 1:nrow){
results[i] = max(c(qq2[i-1],comparable_data[i]))
}
return(results)
}
QQ3 <- sapply(1:3, function(x){
take_max(QQ2[,x], real_data[,x])
})
nrow(comparable_data)
n_row = nrow(comparable_data)
results = rep(0,n_row)
results
1:nrow
nrow
take_max <- function(qq2, comparable_data)
{
browser()
n_row = nrow(comparable_data)
results = rep(0,n_row)
for(i in 1:n_row){
results[i] = max(c(qq2[i-1],comparable_data[i]))
}
return(results)
}
QQ3 <- sapply(1:3, function(x){
take_max(QQ2[,x], real_data[,x])
})
take_max <- function(qq2, comparable_data)
{
n_row = nrow(comparable_data)
results = rep(0,n_row)
for(i in 1:n_row){
results[i] = max(c(qq2[i-1],comparable_data[i]))
}
return(results)
}
QQ3 <- sapply(1:3, function(x){
take_max(QQ2[,x], real_data[,x])
})
QQ2[,x]
QQ2[,3]
1:3
sapply(1:5, print)
list(c(1,2,3))
QQ3 <- sapply(list(c(1L,2L,3L)), function(x){
take_max(QQ2[,x], real_data[,x])
})
take_max <- function(qq2, comparable_data)
{
browser()
n_row = nrow(comparable_data)
results = rep(0,n_row)
for(i in 1:n_row){
results[i] = max(c(qq2[i-1],comparable_data[i]))
}
return(results)
}
QQ3 <- sapply(list(c(1L,2L,3L)), function(x){
take_max(QQ2[,x], real_data[,x])
})
i = 1
qq2[i-1]
qq2[i-1]
comparable_data[i]
c(qq2[i-1],comparable_data[i])
QQ3 <- for(i in 1:3)
{
take_max(QQ2[,i], real_data[,i])
}
i = 1
qq2[i-1]
comparable_data[i]
c(qq2[i-1],comparable_data[i])
View(comparable_data)
c(qq2[i-1,],comparable_data[i,])
max(c(qq2[i-1,],comparable_data[i,]))
max(unlist(c(qq2[i-1,],comparable_data[i,])))
take_max <- function(qq2, comparable_data)
{
n_row = nrow(comparable_data)
results = rep(0,n_row)
for(i in 1:n_row){
results[i] = max(unlist(c(qq2[i-1,],comparable_data[i,])))
}
return(results)
}
QQ3 <- for(i in 1:3)
{
take_max(QQ2[,i], real_data[,i])
}
QQ3
QQ3 <- matrix(0, nrow = nrow(real_data), ncol = ncol(real_data))
for(i in 1:3)
{
QQ3[,i] <- take_max(QQ2[,i], real_data[,i])
}
QQ3
lag(real_data[1,])
lag(real_data[,1])
lag(real_data[,1],1)
lag(real_data[,1],1)
lag(real_data$X,1)
max(c(QQ2[,1], lag(real_data$X,1)))
QQ2[,1]
c(QQ2$V1, lag(real_data$X,1))
max(rbind(QQ2$V1, lag(real_data$X,1)))
real_data_matrix <- as.matrix(real_data)
real_data_matrix
QQ2 = matrix(ncol = ncol(real_data), nrow = nrow(real_data))
QQ2[1,]=real_data[1,]
QQ2[1,]
QQ2
QQ2 = matrix(0,ncol = ncol(real_data_matrix), nrow = nrow(real_data_matrix))
QQ2
QQ2[1,]=real_data[1,]
take_max <- function(new_data, old_data)
{
n <- length(old_data)
results <- c()
for(i in 1:n)
{
results[i] <- max(c(new_data[i], old_data[i-1]))
}
return(results)
}
QQ3 <- sapply(1:3,function(i){
take_max(QQ2[,i],real_data[,i])
})
i <- 1
QQ2[,i]
QQ2
QQ2 = matrix(0,ncol = ncol(real_data_matrix), nrow = nrow(real_data_matrix))
QQ2[1,]=real_data[1,]
QQ2 = matrix(0,ncol = ncol(real_data_matrix), nrow = nrow(real_data_matrix))
QQ2[1,]=real_data_matrix[1,]
QQ3 <- sapply(1:3,function(i){
take_max(QQ2[,i],real_data[,i])
})
QQ3 <- sapply(1:3,function(i){
take_max(QQ2[,i],real_data_matrix[,i])
})
QQ3
QQ1=diff(QQ3)
QQ1
T=(1:nq-1)
sumsq <- matrix(0, 100, 100)
bb
T0=(1:nq-1) #MSQ=10^10
sumsq <- matrix(0, 100, 100)
bb <- 1.5
t0 <- 2.5
for(i in 1:100){
for(j in 1:100){
t0=-100+2*i
bb=j/1000
sumsq[i,j]=sum(((QQ1[,2]+QQ1[,3])/(1+exp(bb*(T0-t0)))-QQ1[,2])^2/(100+QQ1[,2]+QQ1[,3]))
}
}
i
QQ1[,2]+QQ1[,3]
(QQ1[,2]+QQ1[,3])/(1+exp(bb*(T0-t0)))
T0
T0-t0
(bb*(T0-t0))
length(bb*(T0-t0))
length(QQ1[,2]+QQ1[,3])
((QQ1[,2]+QQ1[,3])/(1+exp(bb*(T0-t0)))
)
sumsq[i,j]
sumsq
MSQ
MSQ = 22
# Fitting a sigmoidal function 1/(1+exp(bb*(T-t0))) to the proportion of dead. Two parameters bb and t0
sumsq <- matrix(0, 100, 100)
bb <- 1.5
t0 <- 2.5
for(i in 1:100){
for(j in 1:100){
t0=-100+2*i
bb=j/1000
sumsq[i,j]=sum(((QQ1[,2]+QQ1[,3])/(1+exp(bb*(T0-t0)))-QQ1[,2])^2/(100+QQ1[,2]+QQ1[,3]))
if (sumsq[i,j]<MSQ){
MSQ=sumsq[i,j]
i0=i
j0=j
t1=t0
bb1=bb
}
}
}
